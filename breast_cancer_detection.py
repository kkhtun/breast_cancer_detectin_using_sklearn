# -*- coding: utf-8 -*-
"""breast_cancer_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hQO54xKNyFO2YgiUWkLgd-bszkZi9NdH

My attempt at applying machine learning techniques to train/predict breast cancer(malignant) detection model using sci-kit learn library
"""

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score

#Append the path in google drive (not necessary if running on local disk), please check the respective project location for model.py file
import sys
sys.path.append("/content/drive/My Drive/Colab Notebooks/machine_learning/Breast Cancer Detection") 
from models import model

"""Loading and exploring the data using pandas dataframe"""

dataframe = pd.read_csv("/content/drive/My Drive/Colab Notebooks/machine_learning/Breast Cancer Detection/breast_cancer_data.csv")
dataframe.head()

dataframe.shape

"""Checking the dataframe to see if there are columns with na, NaN values and dropping the columns with such values"""

dataframe.isna().sum()

dataframe = dataframe.dropna(axis = 1)
dataframe.head()

dataframe.shape     #please note that the last column has been dropped!

"""Check the number of patients with benign tumor(B) and those with malignant cancer(M)"""

dataframe["diagnosis"].value_counts()

sns.countplot(dataframe["diagnosis"], label = "Count")

"""Steps for pre-processing the data to fit the model requirements"""

dataframe.iloc[:,1]     #The diagnosis column is object dtype, we need to change it into 0/1 labels

le_Y = LabelEncoder()     #We'll be using label encoder function of sklearn library to convert M/B into 0/1 labels
dataframe.iloc[:,1] = le_Y.fit_transform(dataframe.iloc[:,1].values)
print(dataframe.iloc[:,1])

dataframe.shape

X = dataframe.iloc[:,2:].values
Y = dataframe.iloc[:,1].values
print("Shape of X and Y matrices : "+str(X.shape)+str(Y.shape))

train_X, test_X, train_Y, test_Y = train_test_split(X, Y, test_size = 0.25, random_state = 0)
print("Shape of train_X and train_Y : "+str(train_X.shape)+str(train_Y.shape))

SS = StandardScaler()     #Feature scaling using standard scalar function
train_X = SS.fit_transform(train_X)
test_X = SS.fit_transform(test_X)

"""Training the model using different supervised learning classifers. Please see the "model.py" for sklearn implementation of these models."""

model_list = model(train_X, train_Y)

"""Printing the confusion matrix which is useful in medical diagnostic practices"""

for i in range(len(model_list)):
  conf_m = confusion_matrix(test_Y, model_list[i].predict(test_X))

  TP = conf_m[1][1]
  TN = conf_m[0][0]
  FP = conf_m[0][1]
  FN = conf_m[1][0]

  print(conf_m, " <-- Confusion matrix")
  print("Model [",i,"] Testing accuracy = ", ((TP+TN)/(TP+TN+FP+FN)))
  print("\n")

"""Although we can calculate precision, recall and other metrics from confusion matrix, let's use "classification_report()" and "accuracy_score()" function of sklearn library here."""

for i in range(len(model_list)):

  print("Classification report of model [",i,"]")
  print(classification_report(test_Y, model_list[i].predict(test_X)))
  print("Accuracy score of model [",i,"]")
  print(accuracy_score(test_Y, model_list[i].predict(test_X)))
  print("======================================================")

"""Sincere references go to:

*   https://medium.com/@randerson112358/breast-cancer-detection-using-machine-learning-38820fe98982
*   https://www.kaggle.com/uciml/breast-cancer-wisconsin-data

*   https://www.facebook.com/pythonML.Myanmar
"""